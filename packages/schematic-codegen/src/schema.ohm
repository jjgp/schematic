Schema {
  Document = Definition*
  
  Definition = Componentdef | Interfacedef | Typedef

  /* TODO: statics and callables */
  Interfacedef = interface identifier "{" Member* "}"
  
  Componentdef = component identifier "{" Member* "}"

  Member = identifier ":" (Function | value) ";"

  Typedef = type identifier "{" Property* "}"
  
  Property = NamedValue ";"
  
  NamedFunction = "(" listOf<NamedValue, ","> ")" "->" (value | void)
  
  Function = "(" listOf<value, ","> ")" "->" (value | void)
  
  NamedValue = identifier ":" value 

  /* TODO: listValue, enumValue? */
  value = primitive
        | typeValue
        | unknown

  typeValue = identifier

  identifier = (letter | "_") (alnum | "_")*

  /* TODO: should there be reserved words? */
  reserved = component | interface | type

  init = "init"

  interface = "interface"
  component = "component"
  type = "type"
  
  unknown = "unknown"
  void = "void"

  primitive = boolean | number | string
  
  string = "string"
  number = "number"
  boolean = "boolean"

  comment = singleLineComment | multiLineComment
  multiLineComment = "/*" (~"*/" any)* "*/"
  singleLineComment = "//" (~eol any)* eol
  eol = newline | "\r"
  newline = "\n"
  space += comment
}
